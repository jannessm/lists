#import interfaces.graphql
#import user.graphql
#import task.graphql

type Query @guard {
    pullMe(checkpoint: MeInputCheckpoint @spread, limit: Int!): MePullBulk!
  
    pullUsers(checkpoint: UsersInputCheckpoint @spread, limit: Int!): UserPullBulk!

    # tasks: [Task!]! @all @whereAuth(relation: "user")

    # pullTasks(checkpoint: TasksInputCheckpoint @spread, limit: Int!): TaskPullBulk!
}

type Mutation @guard {
  pushMe(MePushRow: [MeInputPushRow!]): [User!]! @field(resolver: "App\\Models\\User@pushMeResolver")

  pushUsers(userPushRow: [UsersInputPushRow!]): [User!]! @field(resolver: "App\\Models\\User@pushResolver")
  # upsertTask(task: TaskInput! @spread): Task @upsert @inject(context: "user.id", name: "user_id") @broadcast(subscription: "streamTasks")

  # pushTasks(tasksPushRow: [TasksInputPushRow!]): [Task!]! @field(resolver: "App\\Models\\Task@pushResolver")
}

type Subscription @guard {
  streamMe(headers: MeInputHeaders): MePullBulk

  streamUsers(headers: UsersInputHeaders): UserPullBulk
  # streamTasks(headers: TasksInputHeaders): TaskPullBulk
}